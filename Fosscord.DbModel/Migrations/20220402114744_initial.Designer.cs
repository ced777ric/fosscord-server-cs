// <auto-generated />
using System;
using Fosscord.DbModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fosscord.DbModel.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20220402114744_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ChannelMessage", b =>
                {
                    b.Property<string>("ChannelsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MessagesId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ChannelsId", "MessagesId");

                    b.HasIndex("MessagesId");

                    b.ToTable("ChannelMessage");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Application", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<bool>("BotPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bot_public");

                    b.Property<bool>("BotRequireCodeGrant")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bot_require_code_grant");

                    b.Property<string>("CoverImage")
                        .HasColumnType("longtext")
                        .HasColumnName("cover_image");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Flags")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("flags");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PrimarySkuId")
                        .HasColumnType("longtext")
                        .HasColumnName("primary_sku_id");

                    b.Property<string>("PrivacyPolicyUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("privacy_policy_url");

                    b.Property<string>("RpcOrigins")
                        .HasColumnType("longtext")
                        .HasColumnName("rpc_origins");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext")
                        .HasColumnName("slug");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext")
                        .HasColumnName("summary");

                    b.Property<string>("TeamId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("team_id");

                    b.Property<string>("TermsOfServiceUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("terms_of_service_url");

                    b.Property<string>("VerifyKey")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("verify_key");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TeamId");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Attachment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .HasColumnType("longtext")
                        .HasColumnName("content_type");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("filename");

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("message_id");

                    b.Property<string>("ProxyUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("proxy_url");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("size");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.Property<int?>("Width")
                        .HasColumnType("int")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.AuditLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("ActionType")
                        .HasColumnType("int")
                        .HasColumnName("action_type");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("changes");

                    b.Property<string>("Options")
                        .HasColumnType("longtext")
                        .HasColumnName("options");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<string>("TargetId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("target_id");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserId");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Ban", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ExecutorId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("executor_id");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ip");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("bans");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Channel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int?>("Bitrate")
                        .HasColumnType("int")
                        .HasColumnName("bitrate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DefaultAutoArchiveDuration")
                        .HasColumnType("int")
                        .HasColumnName("default_auto_archive_duration");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext")
                        .HasColumnName("icon");

                    b.Property<string>("LastMessageId")
                        .HasColumnType("longtext")
                        .HasColumnName("last_message_id");

                    b.Property<int?>("LastPinTimestamp")
                        .HasColumnType("int")
                        .HasColumnName("last_pin_timestamp");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool?>("Nsfw")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("nsfw");

                    b.Property<string>("OwnerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("owner_id");

                    b.Property<string>("ParentId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("parent_id");

                    b.Property<string>("PermissionOverwrites")
                        .HasColumnType("longtext")
                        .HasColumnName("permission_overwrites");

                    b.Property<int?>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<int?>("RateLimitPerUser")
                        .HasColumnType("int")
                        .HasColumnName("rate_limit_per_user");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext")
                        .HasColumnName("topic");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<int?>("UserLimit")
                        .HasColumnType("int")
                        .HasColumnName("user_limit");

                    b.Property<int?>("VideoQualityMode")
                        .HasColumnType("int")
                        .HasColumnName("video_quality_mode");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentId");

                    b.ToTable("channels");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.ClientRelase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("DebUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("deb_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("OsxUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("osx_url");

                    b.Property<string>("PubDate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("pub_date");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.Property<string>("WinUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("win_url");

                    b.HasKey("Id");

                    b.ToTable("client_relase");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Config", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Key");

                    b.ToTable("config");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.ConnectedAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("access_token");

                    b.Property<bool>("FriendSync")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("friend_sync");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool>("Revoked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("revoked");

                    b.Property<bool>("ShowActivity")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("show_activity");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<bool>("Verifie")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verifie");

                    b.Property<int>("Visibility")
                        .HasColumnType("int")
                        .HasColumnName("visibility");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("connected_accounts");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Emoji", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<bool>("Animated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("animated");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("available");

                    b.Property<string>("GuildId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<bool>("Managed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("managed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool>("RequireColons")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("require_colons");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("roles");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("emojis");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Guild", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("AfkChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("afk_channel_id");

                    b.Property<int?>("AfkTimeout")
                        .HasColumnType("int")
                        .HasColumnName("afk_timeout");

                    b.Property<string>("Banner")
                        .HasColumnType("longtext")
                        .HasColumnName("banner");

                    b.Property<int?>("DefaultMessageNotifications")
                        .HasColumnType("int")
                        .HasColumnName("default_message_notifications");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DiscoverySplash")
                        .HasColumnType("longtext")
                        .HasColumnName("discovery_splash");

                    b.Property<int?>("ExplicitContentFilter")
                        .HasColumnType("int")
                        .HasColumnName("explicit_content_filter");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("features");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext")
                        .HasColumnName("icon");

                    b.Property<bool?>("Large")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("large");

                    b.Property<int?>("MaxMembers")
                        .HasColumnType("int")
                        .HasColumnName("max_members");

                    b.Property<int?>("MaxPresences")
                        .HasColumnType("int")
                        .HasColumnName("max_presences");

                    b.Property<int?>("MaxVideoChannelUsers")
                        .HasColumnType("int")
                        .HasColumnName("max_video_channel_users");

                    b.Property<int?>("MemberCount")
                        .HasColumnType("int")
                        .HasColumnName("member_count");

                    b.Property<int?>("MfaLevel")
                        .HasColumnType("int")
                        .HasColumnName("mfa_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool?>("Nsfw")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("nsfw");

                    b.Property<int?>("NsfwLevel")
                        .HasColumnType("int")
                        .HasColumnName("nsfw_level");

                    b.Property<string>("OwnerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("owner_id");

                    b.Property<string>("PreferredLocale")
                        .HasColumnType("longtext")
                        .HasColumnName("preferred_locale");

                    b.Property<int?>("PremiumSubscriptionCount")
                        .HasColumnType("int")
                        .HasColumnName("premium_subscription_count");

                    b.Property<int?>("PremiumTier")
                        .HasColumnType("int")
                        .HasColumnName("premium_tier");

                    b.Property<int?>("PresenceCount")
                        .HasColumnType("int")
                        .HasColumnName("presence_count");

                    b.Property<string>("PublicUpdatesChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("public_updates_channel_id");

                    b.Property<string>("Region")
                        .HasColumnType("longtext")
                        .HasColumnName("region");

                    b.Property<string>("RulesChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("rules_channel_id");

                    b.Property<string>("Splash")
                        .HasColumnType("longtext")
                        .HasColumnName("splash");

                    b.Property<int?>("SystemChannelFlags")
                        .HasColumnType("int")
                        .HasColumnName("system_channel_flags");

                    b.Property<string>("SystemChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("system_channel_id");

                    b.Property<string>("TemplateId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("template_id");

                    b.Property<bool?>("Unavailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("unavailable");

                    b.Property<int?>("VerificationLevel")
                        .HasColumnType("int")
                        .HasColumnName("verification_level");

                    b.Property<string>("WelcomeScreen")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("welcome_screen");

                    b.Property<string>("WidgetChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("widget_channel_id");

                    b.Property<bool?>("WidgetEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("widget_enabled");

                    b.HasKey("Id");

                    b.HasIndex("AfkChannelId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PublicUpdatesChannelId");

                    b.HasIndex("RulesChannelId");

                    b.HasIndex("SystemChannelId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("WidgetChannelId");

                    b.ToTable("guilds");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Invite", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<string>("ChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<string>("InviterId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("inviter_id");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int")
                        .HasColumnName("max_age");

                    b.Property<int>("MaxUses")
                        .HasColumnType("int")
                        .HasColumnName("max_uses");

                    b.Property<string>("TargetUserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("target_user_id");

                    b.Property<int?>("TargetUserType")
                        .HasColumnType("int")
                        .HasColumnName("target_user_type");

                    b.Property<bool>("Temporary")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("temporary");

                    b.Property<int>("Uses")
                        .HasColumnType("int")
                        .HasColumnName("uses");

                    b.Property<bool?>("VanityUrl")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("vanity_url");

                    b.HasKey("Code");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GuildId");

                    b.HasIndex("InviterId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("invites");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Member", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<bool>("Deaf")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deaf");

                    b.Property<string>("GuildId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("joined_at");

                    b.Property<string>("LastMessageId")
                        .HasColumnType("longtext")
                        .HasColumnName("last_message_id");

                    b.Property<bool>("Mute")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mute");

                    b.Property<string>("Nick")
                        .HasColumnType("longtext")
                        .HasColumnName("nick");

                    b.Property<bool>("Pending")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("pending");

                    b.Property<int?>("PremiumSince")
                        .HasColumnType("int")
                        .HasColumnName("premium_since");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("settings");

                    b.HasKey("Index");

                    b.HasIndex("GuildId");

                    b.HasIndex(new[] { "Id", "GuildId" }, "IDX_bb2bf9386ac443afbbbf9f12d3")
                        .IsUnique();

                    b.ToTable("members");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Activity")
                        .HasColumnType("longtext")
                        .HasColumnName("activity");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application_id");

                    b.Property<string>("AuthorId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("author_id");

                    b.Property<string>("ChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("channel_id");

                    b.Property<string>("Components")
                        .HasColumnType("longtext")
                        .HasColumnName("components");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime?>("EditedTimestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("edited_timestamp");

                    b.Property<string>("Embeds")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("embeds");

                    b.Property<string>("Flags")
                        .HasColumnType("longtext")
                        .HasColumnName("flags");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Interaction")
                        .HasColumnType("longtext")
                        .HasColumnName("interaction");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("member_id");

                    b.Property<bool?>("MentionEveryone")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mention_everyone");

                    b.Property<string>("MessageReference")
                        .HasColumnType("longtext")
                        .HasColumnName("message_reference");

                    b.Property<string>("MessageReferenceId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("message_reference_id");

                    b.Property<string>("Nonce")
                        .HasColumnType("longtext")
                        .HasColumnName("nonce");

                    b.Property<bool?>("Pinned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("pinned");

                    b.Property<string>("Reactions")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reactions");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<bool?>("Tts")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("tts");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("WebhookId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("webhook_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("GuildId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MessageReferenceId");

                    b.HasIndex("WebhookId");

                    b.HasIndex(new[] { "AuthorId" }, "IDX_05535bc695e9f7ee104616459d");

                    b.HasIndex(new[] { "ChannelId", "Id" }, "IDX_3ed7a60fb7dbe04e1ba9332a8b")
                        .IsUnique();

                    b.HasIndex(new[] { "ChannelId" }, "IDX_86b9109b155eb70c0a2ca3b4b6");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Migration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("migrations");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.QueryResultCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("Identifier")
                        .HasColumnType("longtext")
                        .HasColumnName("identifier");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("query");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("result");

                    b.Property<long>("Time")
                        .HasColumnType("bigint")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.ToTable("query-result-cache");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.RateLimit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<bool>("Blocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("blocked");

                    b.Property<string>("ExecutorId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("executor_id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.HasKey("Id");

                    b.ToTable("rate_limits");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.ReadState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("channel_id");

                    b.Property<string>("LastMessageId")
                        .HasColumnType("longtext")
                        .HasColumnName("last_message_id");

                    b.Property<DateTime?>("LastPinTimestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_pin_timestamp");

                    b.Property<bool?>("Manual")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("manual");

                    b.Property<int?>("MentionCount")
                        .HasColumnType("int")
                        .HasColumnName("mention_count");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ChannelId", "UserId" }, "IDX_0abf8b443321bd3cf7f81ee17a")
                        .IsUnique();

                    b.ToTable("read_states");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Recipient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("channel_id");

                    b.Property<bool>("Closed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("closed");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("recipients");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Relationship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("from_id");

                    b.Property<string>("Nickname")
                        .HasColumnType("longtext")
                        .HasColumnName("nickname");

                    b.Property<string>("ToId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("to_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ToId");

                    b.HasIndex(new[] { "FromId", "ToId" }, "IDX_a0b2ff0a598df0b0d055934a17")
                        .IsUnique();

                    b.ToTable("relationships");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("Color")
                        .HasColumnType("int")
                        .HasColumnName("color");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<bool>("Hoist")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hoist");

                    b.Property<bool>("Managed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("managed");

                    b.Property<bool>("Mentionable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mentionable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("permissions");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext")
                        .HasColumnName("tags");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Activities")
                        .HasColumnType("longtext")
                        .HasColumnName("activities");

                    b.Property<string>("ClientInfo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("client_info");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Sticker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<bool?>("Available")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("available");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("FormatType")
                        .HasColumnType("int")
                        .HasColumnName("format_type");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PackId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pack_id");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext")
                        .HasColumnName("tags");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("PackId");

                    b.HasIndex("UserId");

                    b.ToTable("stickers");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.StickerPack", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("BannerAssetId")
                        .HasColumnType("longtext")
                        .HasColumnName("banner_asset_id");

                    b.Property<string>("CoverStickerId")
                        .HasColumnType("longtext")
                        .HasColumnName("cover_sticker_id");

                    b.Property<string>("CoverStickerId1")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("coverStickerId");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CoverStickerId1");

                    b.ToTable("sticker_packs");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("owner_user_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.TeamMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("MembershipState")
                        .HasColumnType("int")
                        .HasColumnName("membership_state");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("permissions");

                    b.Property<string>("TeamId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("team_id");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("team_members");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Template", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatorId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("SerializedSourceGuild")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("serialized_source_guild");

                    b.Property<string>("SourceGuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("source_guild_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UsageCount")
                        .HasColumnType("int")
                        .HasColumnName("usage_count");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SourceGuildId");

                    b.HasIndex(new[] { "Code" }, "UQ_be38737bf339baf63b1daeffb55")
                        .IsUnique();

                    b.ToTable("templates");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.TypeormMetadatum", b =>
                {
                    b.Property<string>("Database")
                        .HasColumnType("longtext")
                        .HasColumnName("database");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Schema")
                        .HasColumnType("longtext")
                        .HasColumnName("schema");

                    b.Property<string>("Table")
                        .HasColumnType("longtext")
                        .HasColumnName("table");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.ToTable("typeorm_metadata");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int?>("AccentColor")
                        .HasColumnType("int")
                        .HasColumnName("accent_color");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar");

                    b.Property<string>("Banner")
                        .HasColumnType("longtext")
                        .HasColumnName("banner");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bio");

                    b.Property<bool>("Bot")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bot");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("data");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleted");

                    b.Property<bool>("Desktop")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("desktop");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("disabled");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Fingerprints")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fingerprints");

                    b.Property<string>("Flags")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("flags");

                    b.Property<bool>("MfaEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mfa_enabled");

                    b.Property<bool>("Mobile")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mobile");

                    b.Property<bool>("NsfwAllowed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("nsfw_allowed");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<bool>("Premium")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("premium");

                    b.Property<int>("PremiumType")
                        .HasColumnType("int")
                        .HasColumnName("premium_type");

                    b.Property<int>("PublicFlags")
                        .HasColumnType("int")
                        .HasColumnName("public_flags");

                    b.Property<string>("Rights")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("rights");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("settings");

                    b.Property<bool>("System")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("system");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.VoiceState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("channel_id");

                    b.Property<bool>("Deaf")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deaf");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<bool>("Mute")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("mute");

                    b.Property<DateTime?>("RequestToSpeakTimestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("request_to_speak_timestamp");

                    b.Property<bool>("SelfDeaf")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("self_deaf");

                    b.Property<bool>("SelfMute")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("self_mute");

                    b.Property<bool?>("SelfStream")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("self_stream");

                    b.Property<bool>("SelfVideo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("self_video");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("session_id");

                    b.Property<bool>("Suppress")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("suppress");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("voice_states");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Webhook", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application_id");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar");

                    b.Property<string>("ChannelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("channel_id");

                    b.Property<string>("GuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guild_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("SourceGuildId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("source_guild_id");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GuildId");

                    b.HasIndex("SourceGuildId");

                    b.HasIndex("UserId");

                    b.ToTable("webhooks");
                });

            modelBuilder.Entity("MemberRole", b =>
                {
                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Index", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("MemberRole");
                });

            modelBuilder.Entity("MessageRole", b =>
                {
                    b.Property<string>("MessagesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RolesId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MessagesId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("MessageRole");
                });

            modelBuilder.Entity("MessageSticker", b =>
                {
                    b.Property<string>("MessagesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StickersId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MessagesId", "StickersId");

                    b.HasIndex("StickersId");

                    b.ToTable("MessageSticker");
                });

            modelBuilder.Entity("MessageUser", b =>
                {
                    b.Property<string>("MessagesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UsersId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MessagesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("MessageUser");
                });

            modelBuilder.Entity("ChannelMessage", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", null)
                        .WithMany()
                        .HasForeignKey("ChannelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Application", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Applications")
                        .HasForeignKey("GuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "Owner")
                        .WithMany("Applications")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Team", "Team")
                        .WithMany("Applications")
                        .HasForeignKey("TeamId");

                    b.Navigation("Guild");

                    b.Navigation("Owner");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Attachment", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.AuditLog", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.User", "Target")
                        .WithMany("AuditLogTargets")
                        .HasForeignKey("TargetId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("AuditLogUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Target");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Ban", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.User", "Executor")
                        .WithMany("BanExecutors")
                        .HasForeignKey("ExecutorId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Bans")
                        .HasForeignKey("GuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("BanUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Executor");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Channel", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "Owner")
                        .WithMany("Channels")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.Navigation("Guild");

                    b.Navigation("Owner");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.ConnectedAccount", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("ConnectedAccounts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Emoji", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Emojis")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("Emojis")
                        .HasForeignKey("UserId");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Guild", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "AfkChannel")
                        .WithMany("GuildAfkChannels")
                        .HasForeignKey("AfkChannelId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "Owner")
                        .WithMany("Guilds")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "PublicUpdatesChannel")
                        .WithMany("GuildPublicUpdatesChannels")
                        .HasForeignKey("PublicUpdatesChannelId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "RulesChannel")
                        .WithMany("GuildRulesChannels")
                        .HasForeignKey("RulesChannelId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "SystemChannel")
                        .WithMany("GuildSystemChannels")
                        .HasForeignKey("SystemChannelId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Template", "Template")
                        .WithMany("Guilds")
                        .HasForeignKey("TemplateId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "WidgetChannel")
                        .WithMany("GuildWidgetChannels")
                        .HasForeignKey("WidgetChannelId");

                    b.Navigation("AfkChannel");

                    b.Navigation("Owner");

                    b.Navigation("PublicUpdatesChannel");

                    b.Navigation("RulesChannel");

                    b.Navigation("SystemChannel");

                    b.Navigation("Template");

                    b.Navigation("WidgetChannel");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Invite", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "Channel")
                        .WithMany("Invites")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Invites")
                        .HasForeignKey("GuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "Inviter")
                        .WithMany("InviteInviters")
                        .HasForeignKey("InviterId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "TargetUser")
                        .WithMany("InviteTargetUsers")
                        .HasForeignKey("TargetUserId");

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("Inviter");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Member", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Members")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "IdNavigation")
                        .WithMany("Members")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Message", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Application", "Application")
                        .WithMany("Messages")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Messages")
                        .HasForeignKey("GuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Member", "Member")
                        .WithMany("Messages")
                        .HasForeignKey("MemberId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Message", "MessageReferenceNavigation")
                        .WithMany("InverseMessageReferenceNavigation")
                        .HasForeignKey("MessageReferenceId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Webhook", "Webhook")
                        .WithMany("Messages")
                        .HasForeignKey("WebhookId");

                    b.Navigation("Application");

                    b.Navigation("Author");

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("Member");

                    b.Navigation("MessageReferenceNavigation");

                    b.Navigation("Webhook");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.ReadState", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "Channel")
                        .WithMany("ReadStates")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("ReadStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Recipient", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "Channel")
                        .WithMany("Recipients")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("Recipients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Relationship", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.User", "From")
                        .WithMany("RelationshipFroms")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "To")
                        .WithMany("RelationshipTos")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Role", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Roles")
                        .HasForeignKey("GuildId");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Session", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Sticker", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("Stickers")
                        .HasForeignKey("GuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.StickerPack", "Pack")
                        .WithMany("Stickers")
                        .HasForeignKey("PackId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("Stickers")
                        .HasForeignKey("UserId");

                    b.Navigation("Guild");

                    b.Navigation("Pack");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.StickerPack", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Sticker", "CoverStickerId1Navigation")
                        .WithMany("StickerPacks")
                        .HasForeignKey("CoverStickerId1");

                    b.Navigation("CoverStickerId1Navigation");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Team", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.User", "OwnerUser")
                        .WithMany("Teams")
                        .HasForeignKey("OwnerUserId");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.TeamMember", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Template", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.User", "Creator")
                        .WithMany("Templates")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "SourceGuild")
                        .WithMany("Templates")
                        .HasForeignKey("SourceGuildId");

                    b.Navigation("Creator");

                    b.Navigation("SourceGuild");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.VoiceState", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "Channel")
                        .WithMany("VoiceStates")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("VoiceStates")
                        .HasForeignKey("GuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("VoiceStates")
                        .HasForeignKey("UserId");

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Webhook", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Application", "Application")
                        .WithMany("Webhooks")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Channel", "Channel")
                        .WithMany("Webhooks")
                        .HasForeignKey("ChannelId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "Guild")
                        .WithMany("WebhookGuilds")
                        .HasForeignKey("GuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.Guild", "SourceGuild")
                        .WithMany("WebhookSourceGuilds")
                        .HasForeignKey("SourceGuildId");

                    b.HasOne("Fosscord.DbModel.Scaffold.User", "User")
                        .WithMany("Webhooks")
                        .HasForeignKey("UserId");

                    b.Navigation("Application");

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("SourceGuild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemberRole", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Member", null)
                        .WithMany()
                        .HasForeignKey("Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageRole", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageSticker", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.Sticker", null)
                        .WithMany()
                        .HasForeignKey("StickersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageUser", b =>
                {
                    b.HasOne("Fosscord.DbModel.Scaffold.Message", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fosscord.DbModel.Scaffold.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Application", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Webhooks");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Channel", b =>
                {
                    b.Navigation("GuildAfkChannels");

                    b.Navigation("GuildPublicUpdatesChannels");

                    b.Navigation("GuildRulesChannels");

                    b.Navigation("GuildSystemChannels");

                    b.Navigation("GuildWidgetChannels");

                    b.Navigation("InverseParent");

                    b.Navigation("Invites");

                    b.Navigation("Messages");

                    b.Navigation("ReadStates");

                    b.Navigation("Recipients");

                    b.Navigation("VoiceStates");

                    b.Navigation("Webhooks");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Guild", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Bans");

                    b.Navigation("Channels");

                    b.Navigation("Emojis");

                    b.Navigation("Invites");

                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("Roles");

                    b.Navigation("Stickers");

                    b.Navigation("Templates");

                    b.Navigation("VoiceStates");

                    b.Navigation("WebhookGuilds");

                    b.Navigation("WebhookSourceGuilds");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Member", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("InverseMessageReferenceNavigation");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Sticker", b =>
                {
                    b.Navigation("StickerPacks");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.StickerPack", b =>
                {
                    b.Navigation("Stickers");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Team", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Template", b =>
                {
                    b.Navigation("Guilds");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("AuditLogTargets");

                    b.Navigation("AuditLogUsers");

                    b.Navigation("BanExecutors");

                    b.Navigation("BanUsers");

                    b.Navigation("Channels");

                    b.Navigation("ConnectedAccounts");

                    b.Navigation("Emojis");

                    b.Navigation("Guilds");

                    b.Navigation("InviteInviters");

                    b.Navigation("InviteTargetUsers");

                    b.Navigation("Members");

                    b.Navigation("Messages");

                    b.Navigation("ReadStates");

                    b.Navigation("Recipients");

                    b.Navigation("RelationshipFroms");

                    b.Navigation("RelationshipTos");

                    b.Navigation("Sessions");

                    b.Navigation("Stickers");

                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");

                    b.Navigation("Templates");

                    b.Navigation("VoiceStates");

                    b.Navigation("Webhooks");
                });

            modelBuilder.Entity("Fosscord.DbModel.Scaffold.Webhook", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
